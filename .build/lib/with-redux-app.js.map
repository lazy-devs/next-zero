{"version":3,"sources":["../../src/lib/with-redux-app.jsx"],"names":["defaultConfig","storeKey","debug","serializeState","state","deserializeState","withRedux","makeStore","customConfig","config","initStore","initialState","ctx","createStore","isServer","Object","prototype","hasOwnProperty","call","window","App","props","context","console","log","store","initialProps","Component","appCtx","Error","getState","getInitialProps"],"mappings":"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","sourcesContent":["/* @flow */\n/* eslint-disable no-console */\n// https://github.com/kirill-konshin/next-redux-wrapper/blob/master/packages/wrapper/src/index.tsx\nimport isServer from 'detect-node';\nimport { Component } from 'react';\nimport { type NextComponentType, type NextContext } from 'next';\nimport { type NextAppContext } from 'next/app';\nimport { type Store } from 'redux';\n\nconst defaultConfig: Config = {\n  storeKey: '__NEXT_REDUX_STORE__',\n  debug: false,\n  serializeState: state => state,\n  deserializeState: state => state,\n};\n\nexport const withRedux = (makeStore: MakeStore, customConfig?: Config) => {\n  const config = {\n    ...defaultConfig,\n    ...customConfig,\n  };\n\n  const initStore = ({ initialState, ctx }: InitStoreOptions): Store => {\n    const { storeKey } = config;\n\n    const createStore = () =>\n      makeStore(config.deserializeState(initialState), {\n        ...ctx,\n        ...config,\n        isServer,\n      });\n\n    // Always make a new store if server, otherwise state is shared between requests\n    if (isServer) return createStore();\n\n    // Memoize store if client\n    // Create store if unavailable on the client and set it on the window object\n    if (!Object.prototype.hasOwnProperty.call(window, storeKey)) {\n      window[storeKey] = createStore();\n    }\n\n    return window[storeKey];\n  };\n\n  return (App: NextComponentType) =>\n    class NextZeroApp extends Component<WrappedAppProps> {\n      store: Store;\n\n      constructor(props, context) {\n        super(props, context);\n\n        const { initialState } = props;\n\n        if (config.debug) console.log('3. NextZeroApp.render created new store with initialState', initialState);\n\n        this.store = initStore({\n          initialState,\n        });\n      }\n\n      static getInitialProps = async (appCtx: NextJSAppContext) => {\n        /* istanbul ignore next */\n        if (!appCtx) throw new Error('No app context');\n        /* istanbul ignore next */\n        if (!appCtx.ctx) throw new Error('No page context');\n\n        const store = initStore({\n          ctx: appCtx.ctx,\n        });\n\n        if (config.debug)\n          console.log('1. NextZeroApp.getInitialProps wrapper got the store with state', store.getState());\n\n        const { ctx } = appCtx;\n        ctx.store = store;\n        ctx.isServer = isServer;\n\n        let initialProps = {};\n\n        if ('getInitialProps' in App) {\n          initialProps = await App.getInitialProps.call(App, appCtx);\n        }\n\n        if (config.debug) console.log('2. NextZeroApp.getInitialProps has store state', store.getState());\n\n        return {\n          isServer,\n          initialState: config.serializeState(store.getState()),\n          initialProps,\n        };\n      };\n\n      render() {\n        const { initialProps, initialState, ...props } = this.props;\n\n        // Cmp render must return something like <Provider><Component/></Provider>\n        return <App {...props} {...initialProps} store={this.store} />;\n      }\n    };\n};\n\nexport interface Config {\n  serializeState?: object => object;\n  deserializeState?: object => object;\n  storeKey?: string;\n  debug?: boolean;\n  overrideIsServer?: boolean;\n}\n\ninterface NextJSContext extends NextContext {\n  store: Store;\n  isServer: boolean;\n}\n\nexport interface NextJSAppContext extends NextAppContext {\n  ctx: NextJSContext;\n}\n\nexport interface MakeStoreOptions extends Config, NextJSContext {\n  isServer: boolean;\n}\n\nexport type MakeStore = (initialState: object, options: MakeStoreOptions) => Store;\n\nexport interface InitStoreOptions {\n  initialState?: object;\n  ctx?: NextJSContext;\n}\n\nexport interface WrappedAppProps {\n  initialProps: object; // stuff returned from getInitialProps\n  initialState: object; // stuff in the Store state after getInitialProps\n  isServer: boolean;\n}\n\nexport interface AppProps {\n  store: Store;\n}\n"],"file":"with-redux-app.js"}