{"version":3,"sources":["../../src/server/index.js"],"names":["nextServer","app","router","name","process","env","PORT","port","use","enableTypes","formLimit","jsonLimit","ctx","next","res","statusCode","status","body","message","get","getRequestHandler","req","respond","handleListen","console","log","chalk"],"mappings":";AACA;AACA;AACA;;AAEA;AACA,2D;;AAEe,wBAA+C,KAA5CA,UAA4C,QAA5CA,UAA4C,CAAhCC,GAAgC,QAAhCA,GAAgC,CAA3BC,MAA2B,QAA3BA,MAA2B,kBAAnBC,IAAmB,CAAnBA,IAAmB,0BAAZ,KAAY;AACpCC,EAAAA,OAAO,CAACC,GAD4B,CACpDC,IADoD,CACpDA,IADoD,kCAC7C,IAD6C;AAE5D,MAAMC,IAAI,GAAG,wBAASD,IAAT,EAAe,EAAf,CAAb;;AAEA;;AAEAL,EAAAA,GAAG,CAACO,GAAJ;AACE,8BAAW;AACTC,IAAAA,WAAW,EAAE,CAAC,MAAD,EAAS,MAAT,CADJ;AAETC,IAAAA,SAAS,EAAE,MAFF;AAGTC,IAAAA,SAAS,EAAE,MAHF,EAAX,CADF;;;;AAQAV,EAAAA,GAAG,CAACO,GAAJ,CAAQ,4BAAR;;AAEAP,EAAAA,GAAG,CAACO,GAAJ,gHAAQ,iBAAOI,GAAP,EAAYC,IAAZ;;AAEJD,cAAAA,GAAG,CAACE,GAAJ,CAAQC,UAAR,GAAqB,GAArB,CAFI;AAGEF,gBAAAA,IAAI,EAHN;;AAKJD,cAAAA,GAAG,CAACI,MAAJ,GAAa,YAAID,UAAJ,IAAkB,YAAIC,MAAtB,IAAgC,GAA7C;AACAJ,cAAAA,GAAG,CAACK,IAAJ,GAAW;AACTC,gBAAAA,OAAO,EAAE,YAAIA,OADJ,EAAX,CANI,yEAAR;;;;;AAYAhB,EAAAA,MAAM,CAACiB,GAAP,CAAW,GAAX,gHAAgB,kBAAMP,GAAN;AACRZ,gBAAAA,UAAU,CAACoB,iBAAX,GAA+BR,GAAG,CAACS,GAAnC,EAAwCT,GAAG,CAACE,GAA5C,CADQ;AAEdF,cAAAA,GAAG,CAACU,OAAJ,GAAc,KAAd,CAFc,0DAAhB;;;AAKA,SAAO;AACLrB,IAAAA,GAAG,EAAHA,GADK;AAELD,IAAAA,UAAU,EAAVA,UAFK;AAGLuB,IAAAA,YAAY,EAAE,wBAAM;AAClB;AACAC,MAAAA,OAAO,CAACC,GAAR,KAAYC,cAAZ,qBAA0BvB,IAA1B;AACAqB,MAAAA,OAAO,CAACC,GAAR,KAAYC,cAAZ,sBAA0BvB,IAA1B,EAA8CF,GAAG,CAACI,GAAlD;AACAmB,MAAAA,OAAO,CAACC,GAAR,uCAA2ClB,IAA3C;AACD,KARI,EAAP;;AAUD,C","sourcesContent":["// @flow\nimport chalk from 'chalk';\nimport bodyParser from 'koa-bodyparser';\nimport reqId from '@kasa/koa-request-id';\n\nexport { default as apmMiddleware } from './apm-middleware';\nexport { default as withNZ } from './with-nz';\n\nexport default ({ nextServer, app, router, name = 'App' }) => {\n  const { PORT = 4000 } = process.env;\n  const port = parseInt(PORT, 10);\n\n  // Handle uncaught errors\n\n  app.use(\n    bodyParser({\n      enableTypes: ['json', 'form'],\n      formLimit: '10mb',\n      jsonLimit: '10mb',\n    })\n  );\n\n  app.use(reqId());\n\n  app.use(async (ctx, next) => {\n    try {\n      ctx.res.statusCode = 200;\n      await next();\n    } catch (err) {\n      ctx.status = err.statusCode || err.status || 500;\n      ctx.body = {\n        message: err.message,\n      };\n    }\n  });\n\n  router.get('*', async ctx => {\n    await nextServer.getRequestHandler()(ctx.req, ctx.res);\n    ctx.respond = false;\n  });\n\n  return {\n    app,\n    nextServer,\n    handleListen: () => {\n      /* eslint-disable no-console */\n      console.log(chalk`{blue ${name}} Start WEB server.`);\n      console.log(chalk`{blue ${name}} ENV {green ${app.env}}`);\n      console.log(`> Ready on http://localhost:${port}`);\n    },\n  };\n};\n"],"file":"index.js"}